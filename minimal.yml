---
- hosts: all

  vars_files:
    - default.minimal-config.yml

  pre_tasks:
    - name: Include playbook configuration.
      include_vars: "{{ item }}"
      with_fileglob:
        - "{{ playbook_dir }}/minimal-config.yml"
      tags: ['always']

  roles:
    - role: elliotweiser.osx-command-line-tools
    - role: geerlingguy.mac.homebrew
      tags: ['homebrew']
    - role: geerlingguy.dotfiles
      when: configure_dotfiles
      tags: ['dotfiles']
    - role: geerlingguy.mac.mas
      when: mas_installed_apps or mas_installed_app_ids
      tags: ['mas']
    - role: geerlingguy.mac.dock
      when: configure_dock
      tags: ['dock']
    - role: markosamuli.pyenv
      when: configure_pyenv
      tags: ['pyenv']

  tasks:
    - import_tasks: tasks/sudoers.yml
      when: configure_sudoers
      tags: ['sudoers']

    - import_tasks: tasks/terminal.yml
      when: configure_terminal
      tags: ['terminal']

    - import_tasks: tasks/osx.yml
      when: configure_osx
      tags: ['osx']

    - import_tasks: tasks/extra-packages.yml
      tags: ['extra-packages']

    # - import_tasks: tasks/sublime-text.yml
    #   when: configure_sublime
    #   tags: ['sublime-text']

    - name: 3.6 upgrade pip
      ansible.builtin.pip:
        name: pip
        executable: pip3.6
        extra_args: --upgrade
      environment:
        PYENV_VERSION: "{{ pyenv_python36_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.7 upgrade pip
      ansible.builtin.pip:
        name: pip
        executable: pip3.7
        extra_args: --upgrade
      environment:
        PYENV_VERSION: "{{ pyenv_python37_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.8 upgrade pip
      ansible.builtin.pip:
        name: pip
        executable: pip3.8
        extra_args: --upgrade
      environment:
        PYENV_VERSION: "{{ pyenv_python38_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.9 upgrade pip
      ansible.builtin.pip:
        name: pip
        executable: pip3.9
        extra_args: --upgrade
      environment:
        PYENV_VERSION: "{{ pyenv_python39_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.10 upgrade pip
      ansible.builtin.pip:
        name: pip
        executable: pip3.10
        extra_args: --upgrade
      environment:
        PYENV_VERSION: "{{ pyenv_python310_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.6 install pipenv
      ansible.builtin.pip:
        name: pipenv
        executable: pip3.6
      environment:
        PYENV_VERSION: "{{ pyenv_python36_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.7 install pipenv
      ansible.builtin.pip:
        name: pipenv
        executable: pip3.7
      environment:
        PYENV_VERSION: "{{ pyenv_python37_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.8 install pipenv
      ansible.builtin.pip:
        name: pipenv
        executable: pip3.8
      environment:
        PYENV_VERSION: "{{ pyenv_python38_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.9 install pipenv
      ansible.builtin.pip:
        name: pipenv
        executable: pip3.9
      environment:
        PYENV_VERSION: "{{ pyenv_python39_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: 3.10 install pipenv
      ansible.builtin.pip:
        name: pipenv
        executable: pip3.10
      environment:
        PYENV_VERSION: "{{ pyenv_python310_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    # hack, install ansible on the new system python, so after the first time we run this,
    # ansible is ready to go again, because pyenv resets the global python version
    - name: 3.8 install pipenv
      ansible.builtin.pip:
        name: ansible
        executable: pip3.8
      environment:
        PYENV_VERSION: "{{ pyenv_python38_version }}"
      when: configure_pyenv
      tags: ['pyenv']

    - name: "Add postgres.app to the path"
      copy:
        dest: "/etc/paths.d/postgresapp"
        content: /Applications/Postgres.app/Contents/Versions/latest/bin
      become: yes

    # for the bees repo (yellow dashboard) we need weasyprint to install
    # to get pyenv python versions to be able to install and run weasyprint, we need a few things to 
    # be in the lib path, specifically we'll get a "fontconfig-1" error, when we run "weasyprint info"
    # this isn't required on the homebrew python, because they specifically patch their python version to hack around it
    # https://github.com/Homebrew/discussions/discussions/3424
    # our solution came form 
    # https://stackoverflow.com/questions/69097224/gobject-2-0-0-not-able-to-load-on-macbook
    # we could also export DYLD_LIBRARY_PATH=/opt/homebrew/lib
    # but the discussion on https://github.com/Homebrew/discussions/discussions/3424 pushed me slightly towards the 
    # symlink option instead
    # equivalent manual commands
    # REQUIRES: brew install the following, which we setup in the default config here.
    # - cairo
    # - pango
    # - libffi
    # - gdk-pixbuf
    # sudo ln -s /opt/homebrew/opt/glib/lib/libgobject-2.0.0.dylib /usr/local/lib/gobject-2.0
    # sudo ln -s /opt/homebrew/opt/pango/lib/libpango-1.0.dylib /usr/local/lib/pango-1.0
    # sudo ln -s /opt/homebrew/opt/harfbuzz/lib/libharfbuzz.dylib /usr/local/lib/harfbuzz
    # sudo ln -s /opt/homebrew/opt/fontconfig/lib/libfontconfig.1.dylib /usr/local/lib/fontconfig-1
    # sudo ln -s /opt/homebrew/opt/pango/lib/libpangoft2-1.0.dylib /usr/local/lib/pangoft2-1.0

    # not sure which form is correct, with or without the  .dylib on the destination
    # django picks it up properly if we include the .dylib version, but none of the ones above
    # used .dylib, so :shrug:
    #
    # REQUIRES: brew install gdal, which we setup in the default config here.
    # sudo ln -s  /opt/homebrew/opt/gdal/lib/libgdal.dylib /usr/local/lib/libgdal
    # sudo ln -s  /opt/homebrew/opt/geos/lib/libgeos_c.dylib /usr/local/lib/libgeos_c
    # sudo ln -s  /opt/homebrew/opt/gdal/lib/libgdal.dylib /usr/local/lib/libgdal.dylib
    # sudo ln -s  /opt/homebrew/opt/geos/lib/libgeos_c.dylib /usr/local/lib/libgeos_c.dylib
    #
    # The alternative is to set the following in your django settings file (note settings, not env variable)
    # GDAL_LIBRARY_PATH = "/opt/homebrew/lib/libgdal.dylib"
    # GEOS_LIBRARY_PATH = "/opt/homebrew/lib/libgeos_c.dylib"
    
    - name: create /usr/local/lib directory if it doesn't exist
      become: True
      file:
        path: "/usr/local/lib/"
        state: directory
    - name: Create symlinks to 5 libraries from  /usr/local/bin
      become: True
      file:
        src: "/opt/homebrew/opt/{{ item.source }}"
        dest: "/usr/local/lib/{{ item.dest }}"
        state: link
      with_items:
        - {source: glib/lib/libgobject-2.0.0.dylib     , dest: gobject-2.0}
        - {source: pango/lib/libpango-1.0.dylib        , dest: pango-1.0}
        - {source: harfbuzz/lib/libharfbuzz.dylib      , dest: harfbuzz}
        - {source: fontconfig/lib/libfontconfig.1.dylib, dest: fontconfig-1}
        - {source: pango/lib/libpangoft2-1.0.dylib     , dest: pangoft2-1.0}
        # not sure which form is correct, with or without the  .dylib on the destination
        # django picks it up properly if we include the .dylib version, but none of the ones above
        # used .dylib, so :shrug:
        - {source: gdal/lib/libgdal.dylib              , dest: libgdal}
        - {source: gdal/lib/libgdal.dylib              , dest: libgdal.dylib}
        - {source: geos/lib/libgeos_c.dylib            , dest: libgeos_c}
        - {source: geos/lib/libgeos_c.dylib            , dest: libgeos_cdylib}


    # todo: right now these two will fail if we haven't run VSCode once to create the 
    # /Library/Application Support/Code directory

    # - name: Create a default VSCode configuration
    #   template:
    #     src: templates/vscode-settings.json.j2
    #     dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/settings.json
    #     owner: "{{ lookup('env', 'USER') }}"
    #     force: yes

    # - name: Create a default VSCode keuybinding configuration
    #   template:
    #     src: templates/vscode-keybindings.json.j2
    #     dest: /Users/{{ lookup('env', 'USER') }}/Library/Application Support/Code/User/keybindings.json
    #     owner: "{{ lookup('env', 'USER') }}"
    #     force: yes

    # # Add something which ensures path is set here
    # - name: Install VSCode extensions
    #   shell: code --install-extension {{ item }}
    #   with_items:
    #     - ms-python.python
    #     - shinichi-takii.sql-bigquery

    # - git:
    #     repo: https://github.com/asdf-vm/asdf.git
    #     dest: "/Users/{{ lookup('env', 'USER') }}/.asdf"
    #     version: v0.8.1

    # - name: "Create a default asdf configuration"
    #   template:
    #     src: templates/.asdfrc.j2
    #     dest: /Users/{{ lookup('env', 'USER') }}/.asdfrc
    #     owner: "{{ lookup('env', 'USER') }}"
    #     force: yes

    # - name: "Install asdf plugins"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf plugin-add {{ item }} || exit 0
    #   with_items:
    #     # - ruby
    #     # - elixir
    #     - nodejs
    #     - python
    #     # - erlang

    # - name: "Install Default Python"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install python 3.10.0
    #     asdf global python 3.10.0
    #     pip3 install ansible
    #     asdf reshim python

    # - name: "Install Default Ruby"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install ruby 3.0.2
    #     asdf global ruby 3.0.2
    #     gem install bundler
    #     gem install cocoapods
    #     gem install rubocop
    #     gem install solargraph

    # - name: "Install default node"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     bash /Users/{{ lookup('env', 'USER') }}/.asdf/plugins/nodejs/bin/import-release-team-keyring
    #     asdf install nodejs 16.4.2
    #     asdf global nodejs 16.4.2

    # - name: "Install default erlang"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install erlang 24.0.2
    #     asdf global  erlang 24.0.2


    # - name: "Install default elixir"
    #   shell: |
    #     source /Users/{{ lookup('env', 'USER') }}/.asdf/asdf.sh
    #     asdf install elixir 1.12.3-otp-24
    #     asdf global elixir 1.12.3-otp-24
    #     mix local.hex --force

    # - name: Install yarn packages
    #   shell: yarn global add {{ item }}
    #   with_items:
    #     - react-native-cli
    #     - create-react-app
    #     - apollo
    #     - generator-generator
    #     - yo
        
    # - name: re-generate bins now we've installed some yarn packages
    #   shell: asdf reshim nodejs
        


    - block:
        - name: Run configured post-provision ansible task files.
          include_tasks: "{{ outer_item }}"
          loop_control:
            loop_var: outer_item
          with_fileglob: "{{ post_provision_tasks|default(omit) }}"
      tags: ['post']
